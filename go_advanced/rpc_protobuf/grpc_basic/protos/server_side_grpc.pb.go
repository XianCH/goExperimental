// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: server_side.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServerSide_ServerSideHello_FullMethodName = "/ServerSide/ServerSideHello"
)

// ServerSideClient is the client API for ServerSide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerSideClient interface {
	// 一个ServerSideHello的方法
	ServerSideHello(ctx context.Context, in *ServerSideRequest, opts ...grpc.CallOption) (ServerSide_ServerSideHelloClient, error)
}

type serverSideClient struct {
	cc grpc.ClientConnInterface
}

func NewServerSideClient(cc grpc.ClientConnInterface) ServerSideClient {
	return &serverSideClient{cc}
}

func (c *serverSideClient) ServerSideHello(ctx context.Context, in *ServerSideRequest, opts ...grpc.CallOption) (ServerSide_ServerSideHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerSide_ServiceDesc.Streams[0], ServerSide_ServerSideHello_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serverSideServerSideHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerSide_ServerSideHelloClient interface {
	Recv() (*ServerSideResponse, error)
	grpc.ClientStream
}

type serverSideServerSideHelloClient struct {
	grpc.ClientStream
}

func (x *serverSideServerSideHelloClient) Recv() (*ServerSideResponse, error) {
	m := new(ServerSideResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerSideServer is the server API for ServerSide service.
// All implementations must embed UnimplementedServerSideServer
// for forward compatibility
type ServerSideServer interface {
	// 一个ServerSideHello的方法
	ServerSideHello(*ServerSideRequest, ServerSide_ServerSideHelloServer) error
	mustEmbedUnimplementedServerSideServer()
}

// UnimplementedServerSideServer must be embedded to have forward compatible implementations.
type UnimplementedServerSideServer struct {
}

func (UnimplementedServerSideServer) ServerSideHello(*ServerSideRequest, ServerSide_ServerSideHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerSideHello not implemented")
}
func (UnimplementedServerSideServer) mustEmbedUnimplementedServerSideServer() {}

// UnsafeServerSideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerSideServer will
// result in compilation errors.
type UnsafeServerSideServer interface {
	mustEmbedUnimplementedServerSideServer()
}

func RegisterServerSideServer(s grpc.ServiceRegistrar, srv ServerSideServer) {
	s.RegisterService(&ServerSide_ServiceDesc, srv)
}

func _ServerSide_ServerSideHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerSideRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerSideServer).ServerSideHello(m, &serverSideServerSideHelloServer{stream})
}

type ServerSide_ServerSideHelloServer interface {
	Send(*ServerSideResponse) error
	grpc.ServerStream
}

type serverSideServerSideHelloServer struct {
	grpc.ServerStream
}

func (x *serverSideServerSideHelloServer) Send(m *ServerSideResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ServerSide_ServiceDesc is the grpc.ServiceDesc for ServerSide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerSide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServerSide",
	HandlerType: (*ServerSideServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerSideHello",
			Handler:       _ServerSide_ServerSideHello_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server_side.proto",
}
