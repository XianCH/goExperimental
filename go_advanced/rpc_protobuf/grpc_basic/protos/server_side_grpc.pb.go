// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: server_side.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServerSide_ServerSide_FullMethodName = "/ServerSide/ServerSide"
)

// ServerSideClient is the client API for ServerSide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerSideClient interface {
	ServerSide(ctx context.Context, in *ServerSideRequest, opts ...grpc.CallOption) (*ServerSideResponse, error)
}

type serverSideClient struct {
	cc grpc.ClientConnInterface
}

func NewServerSideClient(cc grpc.ClientConnInterface) ServerSideClient {
	return &serverSideClient{cc}
}

func (c *serverSideClient) ServerSide(ctx context.Context, in *ServerSideRequest, opts ...grpc.CallOption) (*ServerSideResponse, error) {
	out := new(ServerSideResponse)
	err := c.cc.Invoke(ctx, ServerSide_ServerSide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerSideServer is the server API for ServerSide service.
// All implementations must embed UnimplementedServerSideServer
// for forward compatibility
type ServerSideServer interface {
	ServerSide(context.Context, *ServerSideRequest) (*ServerSideResponse, error)
	mustEmbedUnimplementedServerSideServer()
}

// UnimplementedServerSideServer must be embedded to have forward compatible implementations.
type UnimplementedServerSideServer struct {
}

func (UnimplementedServerSideServer) ServerSide(context.Context, *ServerSideRequest) (*ServerSideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerSide not implemented")
}
func (UnimplementedServerSideServer) mustEmbedUnimplementedServerSideServer() {}

// UnsafeServerSideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerSideServer will
// result in compilation errors.
type UnsafeServerSideServer interface {
	mustEmbedUnimplementedServerSideServer()
}

func RegisterServerSideServer(s grpc.ServiceRegistrar, srv ServerSideServer) {
	s.RegisterService(&ServerSide_ServiceDesc, srv)
}

func _ServerSide_ServerSide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerSideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerSideServer).ServerSide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerSide_ServerSide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerSideServer).ServerSide(ctx, req.(*ServerSideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerSide_ServiceDesc is the grpc.ServiceDesc for ServerSide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerSide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServerSide",
	HandlerType: (*ServerSideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerSide",
			Handler:    _ServerSide_ServerSide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server_side.proto",
}
