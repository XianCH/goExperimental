// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: client_side.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientSide_ClientSideHello_FullMethodName = "/clientSide/ClientSideHello"
)

// ClientSideClient is the client API for ClientSide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientSideClient interface {
	ClientSideHello(ctx context.Context, opts ...grpc.CallOption) (ClientSide_ClientSideHelloClient, error)
}

type clientSideClient struct {
	cc grpc.ClientConnInterface
}

func NewClientSideClient(cc grpc.ClientConnInterface) ClientSideClient {
	return &clientSideClient{cc}
}

func (c *clientSideClient) ClientSideHello(ctx context.Context, opts ...grpc.CallOption) (ClientSide_ClientSideHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientSide_ServiceDesc.Streams[0], ClientSide_ClientSideHello_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clientSideClientSideHelloClient{stream}
	return x, nil
}

type ClientSide_ClientSideHelloClient interface {
	Send(*ClientRequest) error
	CloseAndRecv() (*ClientResponse, error)
	grpc.ClientStream
}

type clientSideClientSideHelloClient struct {
	grpc.ClientStream
}

func (x *clientSideClientSideHelloClient) Send(m *ClientRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientSideClientSideHelloClient) CloseAndRecv() (*ClientResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientSideServer is the server API for ClientSide service.
// All implementations must embed UnimplementedClientSideServer
// for forward compatibility
type ClientSideServer interface {
	ClientSideHello(ClientSide_ClientSideHelloServer) error
	mustEmbedUnimplementedClientSideServer()
}

// UnimplementedClientSideServer must be embedded to have forward compatible implementations.
type UnimplementedClientSideServer struct {
}

func (UnimplementedClientSideServer) ClientSideHello(ClientSide_ClientSideHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientSideHello not implemented")
}
func (UnimplementedClientSideServer) mustEmbedUnimplementedClientSideServer() {}

// UnsafeClientSideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientSideServer will
// result in compilation errors.
type UnsafeClientSideServer interface {
	mustEmbedUnimplementedClientSideServer()
}

func RegisterClientSideServer(s grpc.ServiceRegistrar, srv ClientSideServer) {
	s.RegisterService(&ClientSide_ServiceDesc, srv)
}

func _ClientSide_ClientSideHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientSideServer).ClientSideHello(&clientSideClientSideHelloServer{stream})
}

type ClientSide_ClientSideHelloServer interface {
	SendAndClose(*ClientResponse) error
	Recv() (*ClientRequest, error)
	grpc.ServerStream
}

type clientSideClientSideHelloServer struct {
	grpc.ServerStream
}

func (x *clientSideClientSideHelloServer) SendAndClose(m *ClientResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientSideClientSideHelloServer) Recv() (*ClientRequest, error) {
	m := new(ClientRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientSide_ServiceDesc is the grpc.ServiceDesc for ClientSide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientSide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientSide",
	HandlerType: (*ClientSideServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientSideHello",
			Handler:       _ClientSide_ClientSideHello_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "client_side.proto",
}
