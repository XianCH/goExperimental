// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: bidirection.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bidireactional_BidirectionalHello_FullMethodName = "/Bidireactional/BidirectionalHello"
)

// BidireactionalClient is the client API for Bidireactional service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidireactionalClient interface {
	BidirectionalHello(ctx context.Context, opts ...grpc.CallOption) (Bidireactional_BidirectionalHelloClient, error)
}

type bidireactionalClient struct {
	cc grpc.ClientConnInterface
}

func NewBidireactionalClient(cc grpc.ClientConnInterface) BidireactionalClient {
	return &bidireactionalClient{cc}
}

func (c *bidireactionalClient) BidirectionalHello(ctx context.Context, opts ...grpc.CallOption) (Bidireactional_BidirectionalHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bidireactional_ServiceDesc.Streams[0], Bidireactional_BidirectionalHello_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bidireactionalBidirectionalHelloClient{stream}
	return x, nil
}

type Bidireactional_BidirectionalHelloClient interface {
	Send(*BiRequest) error
	Recv() (*BiResponse, error)
	grpc.ClientStream
}

type bidireactionalBidirectionalHelloClient struct {
	grpc.ClientStream
}

func (x *bidireactionalBidirectionalHelloClient) Send(m *BiRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidireactionalBidirectionalHelloClient) Recv() (*BiResponse, error) {
	m := new(BiResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidireactionalServer is the server API for Bidireactional service.
// All implementations must embed UnimplementedBidireactionalServer
// for forward compatibility
type BidireactionalServer interface {
	BidirectionalHello(Bidireactional_BidirectionalHelloServer) error
	mustEmbedUnimplementedBidireactionalServer()
}

// UnimplementedBidireactionalServer must be embedded to have forward compatible implementations.
type UnimplementedBidireactionalServer struct {
}

func (UnimplementedBidireactionalServer) BidirectionalHello(Bidireactional_BidirectionalHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalHello not implemented")
}
func (UnimplementedBidireactionalServer) mustEmbedUnimplementedBidireactionalServer() {}

// UnsafeBidireactionalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidireactionalServer will
// result in compilation errors.
type UnsafeBidireactionalServer interface {
	mustEmbedUnimplementedBidireactionalServer()
}

func RegisterBidireactionalServer(s grpc.ServiceRegistrar, srv BidireactionalServer) {
	s.RegisterService(&Bidireactional_ServiceDesc, srv)
}

func _Bidireactional_BidirectionalHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidireactionalServer).BidirectionalHello(&bidireactionalBidirectionalHelloServer{stream})
}

type Bidireactional_BidirectionalHelloServer interface {
	Send(*BiResponse) error
	Recv() (*BiRequest, error)
	grpc.ServerStream
}

type bidireactionalBidirectionalHelloServer struct {
	grpc.ServerStream
}

func (x *bidireactionalBidirectionalHelloServer) Send(m *BiResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidireactionalBidirectionalHelloServer) Recv() (*BiRequest, error) {
	m := new(BiRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Bidireactional_ServiceDesc is the grpc.ServiceDesc for Bidireactional service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bidireactional_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bidireactional",
	HandlerType: (*BidireactionalServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalHello",
			Handler:       _Bidireactional_BidirectionalHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bidirection.proto",
}
