// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.3
// source: stock.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StockService_GetStockPrices_FullMethodName = "/StockService/GetStockPrices"
)

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	GetStockPrices(ctx context.Context, in *StockSymbol, opts ...grpc.CallOption) (StockService_GetStockPricesClient, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) GetStockPrices(ctx context.Context, in *StockSymbol, opts ...grpc.CallOption) (StockService_GetStockPricesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[0], StockService_GetStockPrices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &stockServiceGetStockPricesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StockService_GetStockPricesClient interface {
	Recv() (*StockData, error)
	grpc.ClientStream
}

type stockServiceGetStockPricesClient struct {
	grpc.ClientStream
}

func (x *stockServiceGetStockPricesClient) Recv() (*StockData, error) {
	m := new(StockData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility
type StockServiceServer interface {
	GetStockPrices(*StockSymbol, StockService_GetStockPricesServer) error
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (UnimplementedStockServiceServer) GetStockPrices(*StockSymbol, StockService_GetStockPricesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStockPrices not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_GetStockPrices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StockSymbol)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockServiceServer).GetStockPrices(m, &stockServiceGetStockPricesServer{ServerStream: stream})
}

type StockService_GetStockPricesServer interface {
	Send(*StockData) error
	grpc.ServerStream
}

type stockServiceGetStockPricesServer struct {
	grpc.ServerStream
}

func (x *stockServiceGetStockPricesServer) Send(m *StockData) error {
	return x.ServerStream.SendMsg(m)
}

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStockPrices",
			Handler:       _StockService_GetStockPrices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stock.proto",
}
