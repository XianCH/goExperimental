// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.3
// source: marketServerStream.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StockMarketService_SubscribeStockPrices_FullMethodName = "/pb.StockMarketService/SubscribeStockPrices"
)

// StockMarketServiceClient is the client API for StockMarketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockMarketServiceClient interface {
	SubscribeStockPrices(ctx context.Context, in *SubscribeStockPricesRequest, opts ...grpc.CallOption) (StockMarketService_SubscribeStockPricesClient, error)
}

type stockMarketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockMarketServiceClient(cc grpc.ClientConnInterface) StockMarketServiceClient {
	return &stockMarketServiceClient{cc}
}

func (c *stockMarketServiceClient) SubscribeStockPrices(ctx context.Context, in *SubscribeStockPricesRequest, opts ...grpc.CallOption) (StockMarketService_SubscribeStockPricesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StockMarketService_ServiceDesc.Streams[0], StockMarketService_SubscribeStockPrices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &stockMarketServiceSubscribeStockPricesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StockMarketService_SubscribeStockPricesClient interface {
	Recv() (*SubscribeStockPricesResponse, error)
	grpc.ClientStream
}

type stockMarketServiceSubscribeStockPricesClient struct {
	grpc.ClientStream
}

func (x *stockMarketServiceSubscribeStockPricesClient) Recv() (*SubscribeStockPricesResponse, error) {
	m := new(SubscribeStockPricesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockMarketServiceServer is the server API for StockMarketService service.
// All implementations must embed UnimplementedStockMarketServiceServer
// for forward compatibility
type StockMarketServiceServer interface {
	SubscribeStockPrices(*SubscribeStockPricesRequest, StockMarketService_SubscribeStockPricesServer) error
	mustEmbedUnimplementedStockMarketServiceServer()
}

// UnimplementedStockMarketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockMarketServiceServer struct {
}

func (UnimplementedStockMarketServiceServer) SubscribeStockPrices(*SubscribeStockPricesRequest, StockMarketService_SubscribeStockPricesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeStockPrices not implemented")
}
func (UnimplementedStockMarketServiceServer) mustEmbedUnimplementedStockMarketServiceServer() {}

// UnsafeStockMarketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockMarketServiceServer will
// result in compilation errors.
type UnsafeStockMarketServiceServer interface {
	mustEmbedUnimplementedStockMarketServiceServer()
}

func RegisterStockMarketServiceServer(s grpc.ServiceRegistrar, srv StockMarketServiceServer) {
	s.RegisterService(&StockMarketService_ServiceDesc, srv)
}

func _StockMarketService_SubscribeStockPrices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeStockPricesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockMarketServiceServer).SubscribeStockPrices(m, &stockMarketServiceSubscribeStockPricesServer{ServerStream: stream})
}

type StockMarketService_SubscribeStockPricesServer interface {
	Send(*SubscribeStockPricesResponse) error
	grpc.ServerStream
}

type stockMarketServiceSubscribeStockPricesServer struct {
	grpc.ServerStream
}

func (x *stockMarketServiceSubscribeStockPricesServer) Send(m *SubscribeStockPricesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StockMarketService_ServiceDesc is the grpc.ServiceDesc for StockMarketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockMarketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StockMarketService",
	HandlerType: (*StockMarketServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeStockPrices",
			Handler:       _StockMarketService_SubscribeStockPrices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "marketServerStream.proto",
}
